#include "stm32f0xx.h"
#include <algorithm>
#include <cstdio>

#ifdef __cplusplus
extern "C"{
#endif
#include <usb_desc/usb_packet.h>
#include <usb_desc/usb_descriptor.h>
#include "usb.h"
/* #define printf(...) */

/* Pointer Notation
 * - type = uintptr_t : This is an pointer for PMA.
 *                      Local offset of PMA is stored.
 * - type = void * or others
 *                    : This is an pointer for main memory.
 */

char usb_is_ready;

// External Descriptors {{{
extern const USBDeviceDescriptor dev_desc_hid;
extern const USBStringDescriptor string_desc[];
extern const __attribute__((aligned(2))) uint8_t conf_desc_mouse[];
extern const __attribute__((aligned(2))) uint8_t conf_desc_keyb[];
extern const __attribute__((aligned(2))) uint8_t conf_desc_keyb_mouse[];
extern const uint8_t __attribute__((aligned(2))) ReportDescriptorForMouse[50];
extern const uint8_t __attribute__((aligned(2))) ReportDescriptorForKeyBoard[63];
// }}}

// Some macros {{{
#define SUPPRESS_WARN(x) (void)(x)
#define USB_EPnR(n) *reinterpret_cast<volatile uint16_t *>(reinterpret_cast<uintptr_t>(&USB->EP0R) + 4 * (n))
enum USBSetupPacketRequest {
	GET_STATUS = 0, CLEAR_FEATURE = 1, SET_FEATURE = 3,
	SET_ADDRESS = 5, GET_DESCRIPTOR = 6, SET_DESCRIPTOR = 7,
	GET_CONFIGURATION = 8, SET_CONFIGURATION = 9,
	GET_INTERFACE = 10, SET_INTERFACE = 11, SYNCH_FRAME = 12
};
enum USBDescriptorType {
	DEVICE = 1, CONFIGURATION = 2, STRING = 3, INTERFACE = 4,
	ENDPOINT = 5, DEVICE_QUALIFIER = 6,
	OTHER_SPEED_CONFIGURATION = 7, INTERFACE_POWER = 8,
	HID_REPORT = 0x22
};
// }}}

// Dependent data for USB Functionality Selection {{{
struct USBDeviceDeps {
	const USBDeviceDescriptor* dev_desc;
	const uint8_t* conf_desc;
	const uint8_t* hid_report_desc;
	const uint8_t hid_report_desc_length;
	const uint8_t report_length;
};
// }}}
static volatile const USBDeviceDeps deps[DEVTYPE_LEN] = { // {{{
		[HID_MOUSE] = {
				.dev_desc = &dev_desc_hid,
				.conf_desc = conf_desc_mouse,
				.hid_report_desc = ReportDescriptorForMouse,
				.hid_report_desc_length = sizeof(ReportDescriptorForMouse),
				.report_length = 3,
		},
		[HID_KEYBOARD] = {
				.dev_desc = &dev_desc_hid,
				.conf_desc = conf_desc_keyb,
				.hid_report_desc = ReportDescriptorForKeyBoard,
				.hid_report_desc_length = sizeof(ReportDescriptorForKeyBoard),
				.report_length = 8,
		},
		[COMPOSITE] = {
				.dev_desc = &dev_desc_hid,
				.conf_desc = conf_desc_keyb_mouse,
		},
}; // }}}
static USBDeviceType dev_type;

// Vars for PMA buffer {{{
struct PMAOffsets {
	uint16_t setup_packet;
	uint16_t device_desc;
	uint16_t config_desc;
	uint16_t string_desc[4];
	uint16_t report_desc;
	uint16_t report;
};
struct PMAInfo {
	PMAOffsets offsets;
	uint16_t sp;
};
// }}}
static PMAInfo pma_allocation_info;

// Struct for USB Peripheral & EP {{{
struct PacketBuffer {
	uint16_t addr_tx;
	uint16_t count_tx;
	uint16_t addr_rx;
	uint16_t count_rx;
};
enum struct EP_fsm {
	RESET, SETUP, IN, REPETITIVE_IN, OUT, STATUS_IN, STATUS_OUT,
	LENGTH
};
struct DataInfo {
	uint16_t ptr;
	uint16_t completed_length;
	uint16_t whole_length;
};
struct USBEndpointInfo {
	uint16_t packet_size;
	PacketBuffer* pb_ptr;
	DataInfo xfer_info;
	DataInfo recv_info;
	EP_fsm fsm;
	USBSetupPacket last_setup;
};
// }}}
static USBEndpointInfo ep_info[2];

// Utility Funcs {{{
namespace Utils {
	static uint16_t alloc(int size) {
		const auto ret = pma_allocation_info.sp;
		pma_allocation_info.sp += size;
		if( size & 1 ) pma_allocation_info.sp++;
		return ret;
	}
	static void pma_out(void* dest, const uintptr_t src, int size) {
		uintptr_t src_global_addr = src + USB_PMAADDR;
		auto* src_p = (uint16_t *)src_global_addr;
		auto* dest_p = (uint8_t *)dest;
		if( size & 1 ) size++;
		for(int i = 0; i < size / 2; i++) {
			dest_p[2 * i] = src_p[i] & 0xFF;
			dest_p[2 * i + 1] = src_p[i] >> 8;
		}
	}
	static void pma_in(uintptr_t dest, const void* src, int size) {
		uintptr_t dest_global_addr = dest + USB_PMAADDR;
		auto* src_p = (uint8_t *)src;
		auto* dest_p = (uint16_t *)dest_global_addr;
		if( size & 1 ) size++;
		for(int i = 0; i < size / 2; i++) {
			dest_p[i] = src_p[2 * i] | (src_p[2 * i + 1] << 8);
		}
	}
	namespace Dump {
		static void setup_packet() {
			printf("bmResuestType: 0x%02x\n", ep_info[0].last_setup.bmRequestType);
			printf("bRequest: %d\n", ep_info[0].last_setup.bRequest);
			printf("wValue: 0x%x\n", ep_info[0].last_setup.wValue);
			printf("wIndex: 0x%x\n", ep_info[0].last_setup.wIndex);
			printf("wLength: 0x%x\n", ep_info[0].last_setup.wLength);
		}
		static void fsm() {
			const char* table[static_cast<int>(EP_fsm::LENGTH)] = {
				"ST_RESET",
				"SETUP",
				"IN",
				"REPETITIVE_IN",
				"OUT",
				"STATUS_IN",
				"STATUS_OUT",
			};
			SUPPRESS_WARN(table);
			printf("** %s\n", table[static_cast<int>(ep_info[0].fsm)]);
		}
	}
}
// }}}

// Init global Funcs {{{
void usb_init() {
	RCC->APB1ENR |= RCC_APB1ENR_USBEN;

	USB->CNTR &= ~USB_CNTR_PDWN;
	for(volatile int i=0; i<100; i++); // wait for voltage to be stable
	USB->CNTR &= ~USB_CNTR_FRES;
	USB->BCDR |= USB_BCDR_DPPU; // pull-up DP so as to notify the connection to the host

	USB->CNTR = USB_CNTR_RESETM; // enable reset interrupt
	NVIC_SetPriority(USB_IRQn, 0); // Highest Priority
	NVIC_EnableIRQ(USB_IRQn);
}
void usb_device_init(USBDeviceType type) {
	dev_type = type;
}
// }}}

// Fundamental xfer/recv Funcs {{{
static void usb_endpoint_set_status(int endp, uint16_t status, uint16_t mask) {
	const auto reg = USB_EPnR(endp);
	USB_EPnR(endp) = (reg & (USB_EPREG_MASK | mask)) ^ status;
}
static void usb_ep_send(int ep_num, uint16_t addr, uint16_t size) {
	ep_info[ep_num].pb_ptr->addr_tx = addr;
	ep_info[ep_num].pb_ptr->count_tx = size;
	usb_endpoint_set_status(ep_num, USB_EP_TX_VALID, USB_EPTX_STAT);
}
static void usb_ep_receive(int ep_num, uint16_t addr, uint16_t size) {
	if( ep_info[ep_num].pb_ptr->addr_rx == 0 ) {
		ep_info[ep_num].pb_ptr->addr_rx = addr;
		if( size > 62 ) {
			ep_info[ep_num].pb_ptr->count_rx = ((size / 32) - 1) << 10;
			ep_info[ep_num].pb_ptr->count_rx |= 1 << 15;
		}else{
			ep_info[ep_num].pb_ptr->count_rx = size << 10;
		}
	}
	usb_endpoint_set_status(ep_num, USB_EP_RX_VALID, USB_EPRX_STAT);
}
// }}}

static void search_and_set_descriptor(uint16_t wValue) { // {{{
	const auto desc_type = (wValue >> 8) & 0xFF;
	auto& xfer_info = ep_info[0].xfer_info;
	auto& offsets = pma_allocation_info.offsets;

	switch( desc_type ) {
	case DEVICE:
	{
		const auto len = deps[dev_type].dev_desc->bLength;
		if( offsets.device_desc == 0 ) {
			offsets.device_desc = Utils::alloc(len);
			Utils::pma_in(offsets.device_desc, deps[dev_type].dev_desc, len);
		}
		xfer_info.ptr = offsets.device_desc;
		xfer_info.whole_length = len;
		break;
	}
	case CONFIGURATION:
	{
		const auto len = deps[dev_type].conf_desc[2] | (deps[dev_type].conf_desc[3] << 8);
		if( offsets.config_desc == 0 ) {
			offsets.config_desc = Utils::alloc(len);
			Utils::pma_in(offsets.config_desc, deps[dev_type].conf_desc, len);
		}
		xfer_info.ptr = offsets.config_desc;
		xfer_info.whole_length = len;
		break;
	}
	case STRING:
	{
		const auto desc_no = wValue & 0xFF;
		const auto len = string_desc[desc_no].bLength;
		if( offsets.string_desc[desc_no] == 0 ) {
			offsets.string_desc[desc_no] = Utils::alloc(len);
			Utils::pma_in(offsets.string_desc[desc_no], &string_desc[desc_no], len);
		}
		xfer_info.ptr = offsets.string_desc[desc_no];
		xfer_info.whole_length = len;
		break;
	}
	case HID_REPORT:
	{
		const auto len = deps[dev_type].hid_report_desc_length;
		if( offsets.report_desc == 0 ) {
			offsets.report_desc = Utils::alloc(len);
			Utils::pma_in(offsets.report_desc, deps[dev_type].hid_report_desc, len);
		}
		xfer_info.ptr = offsets.report_desc;
		xfer_info.whole_length = len;
		usb_is_ready = 1;
		break;
	}
	default:
		break;
	}
	xfer_info.completed_length = 0;
} // }}}

// EP0 Handler/Preparer {{{
static void usb_ep0_handle_setup() {
	static uint16_t state = 0;
	static uint16_t state_addr = 0;
	const auto& ep = ep_info[0];
	auto& xfer_info = const_cast<decltype(ep_info[0])&>(ep).xfer_info;
	const auto& last_setup = ep.last_setup;
	if( last_setup.bRequest == GET_DESCRIPTOR ) {
		search_and_set_descriptor(last_setup.wValue);
		usb_ep_send(0, xfer_info.ptr, std::min({last_setup.wLength, ep.packet_size, xfer_info.whole_length}));
	}
	if( last_setup.bRequest == GET_CONFIGURATION ) {
		if( state_addr == 0 ) {
			state_addr = Utils::alloc(1);
		}
		Utils::pma_in(state_addr, &state, 1);
		xfer_info.ptr = state_addr;
		xfer_info.whole_length = 1;
		usb_ep_send(0, xfer_info.ptr, xfer_info.whole_length);
	}
	if( last_setup.bRequest == SET_CONFIGURATION ) {
		state = last_setup.wValue;
	}
}
static void usb_ep0_handle_status() {
	if( ep_info[0].last_setup.bRequest == SET_ADDRESS ) {
		USB->DADDR = USB_DADDR_EF | (ep_info[0].last_setup.wValue & 0x7F);
	}
}

static void usb_ep0_prepare_for_setup() {
	if( pma_allocation_info.offsets.setup_packet == 0 ) {
		pma_allocation_info.offsets.setup_packet = Utils::alloc(64);
	}
	usb_ep_receive(0, pma_allocation_info.offsets.setup_packet, sizeof(USBSetupPacket));
}
static void usb_ep0_prepare_for_next_in() {
	// Now data is left to be xferred.
	// This means the last IN transaction is completed but the data length is not enough.
	auto& xfer_info = ep_info[0].xfer_info;
	const auto length_xferred = ep_info[0].xfer_info.completed_length;

	xfer_info.completed_length += length_xferred;
	const auto next_pos = xfer_info.completed_length + xfer_info.ptr;
	usb_ep_send(0, next_pos, xfer_info.whole_length - ep_info[0].packet_size);
}
static void usb_ep0_prepare_for_status() {
	if( ep_info[0].fsm == EP_fsm::STATUS_OUT ) {
		usb_ep_receive(0, ep_info[0].recv_info.ptr, 0);
	}
	if( ep_info[0].fsm == EP_fsm::STATUS_IN ) {
		usb_ep_send(0, ep_info[0].xfer_info.ptr, 0);
	}
}
static void usb_ep0_handle_current_transaction() {
	const auto now_state = ep_info[0].fsm;
	switch(now_state) {
		case EP_fsm::SETUP:
			usb_ep0_handle_setup();
			break;
		case EP_fsm::STATUS_IN:
		case EP_fsm::STATUS_OUT:
			usb_ep0_handle_status();
			break;
		default:
			break;
	}
}
static void usb_ep0_prepare_for_next_transaction() {
	const auto next_state = ep_info[0].fsm;
	switch(next_state) {
		case EP_fsm::REPETITIVE_IN:
			usb_ep0_prepare_for_next_in();
			break;
		case EP_fsm::STATUS_IN:
		case EP_fsm::STATUS_OUT:
			usb_ep0_prepare_for_status();
			break;
		case EP_fsm::SETUP:
			usb_ep0_prepare_for_setup();
			break;
		default:
			break;
	}
}
// }}}

static EP_fsm next_state_ep0() { // {{{
	const auto& ep = ep_info[0];
	const auto& last_setup = ep.last_setup;
	switch(ep.fsm) {
		case EP_fsm::SETUP:
			if( last_setup.bmRequestType & 0x80 ) {
				return (last_setup.wLength != 0) ? EP_fsm::IN : EP_fsm::STATUS_IN;
			}else{
				return (last_setup.wLength != 0) ? EP_fsm::OUT : EP_fsm::STATUS_IN;
			}
			break;
		case EP_fsm::IN:
		case EP_fsm::REPETITIVE_IN:
			{
				const auto& xfer_info = ep.xfer_info;
				const auto length_to_be_xferred = xfer_info.whole_length - xfer_info.completed_length;
				if( length_to_be_xferred > ep.packet_size ) {
					return EP_fsm::REPETITIVE_IN;
				}
				return EP_fsm::STATUS_OUT;
				break;
			}
		case EP_fsm::OUT:
			return EP_fsm::STATUS_IN;
			break;
		default:
			break;
	}
	return EP_fsm::SETUP;
} // }}}

alignas(2) volatile int8_t report[8] = {};
void USB_IRQHandler() {
	auto flag = USB->ISTR;

	if( flag & USB_ISTR_RESET ) {
		printf("\nRESET\n");
		usb_is_ready = 0;
		USB->ISTR &= ~USB_ISTR_RESET;
		USB->CNTR |= USB_CNTR_CTRM | USB_CNTR_RESETM;
		pma_allocation_info = {};
		USB->BTABLE = Utils::alloc(sizeof(PacketBuffer) * 2);
		USB->DADDR = USB_DADDR_EF; // enable the functionality

		// initialize EP0
		ep_info[0].fsm = EP_fsm::RESET;
		ep_info[0].packet_size = 64;
		ep_info[0].pb_ptr = reinterpret_cast<PacketBuffer *>(static_cast<uintptr_t>(USB->BTABLE) + USB_PMAADDR);
		ep_info[0].pb_ptr->addr_rx = 0;
		USB_EPnR(0) = USB_EP_CONTROL;
		usb_ep0_prepare_for_setup();
		// initialize EP1
		ep_info[1].packet_size = 64;
		ep_info[1].pb_ptr = reinterpret_cast<PacketBuffer *>(static_cast<uintptr_t>(USB->BTABLE) + USB_PMAADDR + sizeof(PacketBuffer) * 1);
		USB_EPnR(1) = USB_EP_INTERRUPT | 0x01;
		pma_allocation_info.offsets.report = Utils::alloc(deps[dev_type].report_length); // size of report, in this case.
		Utils::pma_in(pma_allocation_info.offsets.report, const_cast<int8_t *>(report), deps[dev_type].report_length);
		usb_ep_send(1, pma_allocation_info.offsets.report, deps[dev_type].report_length);
	}

	while( (flag = USB->ISTR) & USB_ISTR_CTR ) {
		const auto ep_num = flag & USB_ISTR_EP_ID;
		const auto epreg = USB_EPnR(ep_num);

		if( ep_num == 0 ) {
			if( epreg & USB_EP_CTR_RX ) {
				// DIR == 1 : IRQ by SETUP transaction. CTR_RX is set.
				USB_EPnR(0) = epreg & ~USB_EP_CTR_RX & USB_EPREG_MASK;
				if( epreg & USB_EP_SETUP ) {
					ep_info[ep_num].fsm = EP_fsm::SETUP;
					Utils::pma_out(&ep_info[ep_num].last_setup, pma_allocation_info.offsets.setup_packet, sizeof(USBSetupPacket));
					Utils::Dump::setup_packet();
				}
				Utils::Dump::fsm();
				usb_ep0_handle_current_transaction();
			}
			if( epreg & USB_EP_CTR_TX ) {
				// DIR = 0 : IRQ by IN direction. CTR_TX is set.
				USB_EPnR(0) = epreg & ~USB_EP_CTR_TX & USB_EPREG_MASK;
				Utils::Dump::fsm();
				usb_ep0_handle_current_transaction();
			}
			ep_info[ep_num].fsm = next_state_ep0();
			usb_ep0_prepare_for_next_transaction();
		}else { // EP is assumed to be an Interrupt Transfer, dir = IN.
			const auto report_length = deps[dev_type].report_length;
			USB_EPnR(ep_num) = epreg & ~USB_EP_CTR_TX & USB_EPREG_MASK;
			Utils::pma_in(pma_allocation_info.offsets.report, const_cast<int8_t *>(report), report_length);
			usb_ep_send(ep_num, pma_allocation_info.offsets.report, report_length);
		}
	}
}
#ifdef __cplusplus
} // extern "C"
#endif
